/*
  generated header from FMOD studio script @
     https://gist.github.com/AODQ/0b064808a492cfe4386e5746a31a6ac9
  do not edit!
*/

#pragma once

#include <array>

struct fmodGuid {
  uint32_t data0;
  uint16_t data1;
  uint16_t data2;
  uint8_t data4[8];
  /* std::array<uint8_t, 8> data4; */
};

namespace pul::audio::event {
  enum class Type : uint32_t {
    AnnouncerCount,
    CharacterDamageDeath,
    CharacterDamageDrown,
    CharacterDamageHurt,
    CharacterDialogueAttack,
    CharacterDialogueTaunt,
    CharacterMiscSpawn,
    CharacterMiscTeleport,
    CharacterMovementDash,
    CharacterMovementJump,
    CharacterMovementLand,
    CharacterMovementSlide,
    CharacterMovementStep,
    EnvironmentLiquidAmbience,
    EnvironmentLiquidAmbienceSubmerge,
    EnvironmentLiquidDrip,
    EnvironmentLiquidEmerge,
    EnvironmentLiquidHurt,
    EnvironmentLiquidSubmerge,
    EnvironmentLiquidSwim,
    EnvironmentMapEntityJumpPadActivate,
    EnvironmentMapEntityJumpPadTrail,
    EnvironmentMapEntityLiftActivate,
    EnvironmentMapEntityLiftTrail,
    EnvironmentMapEntityTrapRockBreak,
    EnvironmentMapEntityTrapRockDebree,
    EnvironmentMapEntityTrapTrapAxeAction,
    EnvironmentMapEntityTrapTrapAxeHurt,
    EnvironmentMapEntityTrapTrapSpikeAction,
    EnvironmentMapEntityTrapTrapSpikeHurt,
    HudPlayerHitEnemy,
    HudPlayerHitFriendly,
    HudPlayerHurt,
    HudPlayerKillEnemy,
    HudPlayerKillFriendly,
    PickupActivate,
    PickupSpawn,
    Size,
  };

  constexpr std::array<fmodGuid, 52> guids = {{
    {0x32addf1b, 0x5593, 0x447e, {0xa0, 0xf3, 0x43, 0xad, 0x55, 0x01, 0x07, 0xe9}},
    {0x5472a84a, 0x0fcc, 0x40a9, {0xa4, 0x73, 0xd7, 0xf4, 0xd9, 0xd4, 0xab, 0x10}},
    {0x34bc7f73, 0x6b74, 0x4c83, {0xa5, 0x21, 0x6c, 0x24, 0xd8, 0x17, 0xd8, 0xf0}},
    {0xf3184c86, 0x472b, 0x40d8, {0x9e, 0x8f, 0xee, 0x72, 0x4e, 0xbf, 0x50, 0xf7}},
    {0x2e7c57ed, 0xada1, 0x461d, {0xaf, 0x19, 0x9f, 0xad, 0x0a, 0x1a, 0x83, 0xc9}},
    {0x7cc598d5, 0x15fb, 0x4e71, {0xb6, 0xb0, 0xdc, 0xb9, 0xe0, 0x08, 0xfd, 0xf2}},
    {0xa31e5e50, 0xd312, 0x48e2, {0xb9, 0x65, 0x9a, 0x06, 0x98, 0x88, 0x8a, 0xcd}},
    {0x1b5ca291, 0x5500, 0x4cb9, {0xa8, 0x51, 0xb0, 0x54, 0xf4, 0xfa, 0x82, 0xf9}},
    {0x6763a227, 0x7aad, 0x4a79, {0xbf, 0x40, 0x45, 0x18, 0x50, 0x8a, 0x1e, 0x09}},
    {0x9b97df8b, 0x17b9, 0x4b42, {0x95, 0x37, 0xb7, 0x0a, 0x73, 0xbe, 0x33, 0xa4}},
    {0xb64e3f21, 0x4ef3, 0x441d, {0xa0, 0x17, 0x44, 0xcb, 0xab, 0x50, 0x6d, 0xac}},
    {0xe7309d32, 0x646a, 0x4207, {0x97, 0xfa, 0x5b, 0xe2, 0xb5, 0x44, 0x7f, 0xfb}},
    {0x5bcacc25, 0x52bb, 0x4848, {0x88, 0x50, 0x96, 0x08, 0xea, 0x4b, 0x63, 0x1c}},
    {0x7d1cca18, 0xe2d5, 0x4f2d, {0x8b, 0x47, 0x03, 0x2f, 0xc7, 0xd2, 0x62, 0x93}},
    {0xe8747ca0, 0x4658, 0x4b5f, {0x9b, 0xa4, 0xb3, 0x33, 0x65, 0x57, 0xd3, 0x24}},
    {0xdb2e06da, 0x2d14, 0x4bd8, {0x97, 0x01, 0x9d, 0x00, 0x6f, 0x71, 0x42, 0xf6}},
    {0x0905d80d, 0xe889, 0x4c4f, {0xae, 0x22, 0x79, 0x9a, 0xff, 0x57, 0x4f, 0x81}},
    {0x81275ddc, 0x114e, 0x4391, {0x85, 0xae, 0x36, 0x1c, 0xc6, 0x3e, 0x27, 0xf8}},
    {0xd30cb6ac, 0xb55f, 0x409f, {0xb2, 0xf7, 0xc4, 0x9b, 0xe8, 0x41, 0x98, 0x5b}},
    {0x7626c606, 0x8e1f, 0x4145, {0xb9, 0x47, 0xb7, 0x97, 0x51, 0x64, 0xd9, 0xef}},
    {0xe6e065f3, 0xc9dd, 0x4399, {0xb1, 0x43, 0x0c, 0x16, 0x36, 0x6d, 0xd7, 0xe4}},
    {0xa3c869dd, 0x1eed, 0x49d2, {0xb6, 0x18, 0xbc, 0xbd, 0x58, 0xf9, 0xce, 0xb1}},
    {0x6c3bc558, 0x335b, 0x4ffd, {0xb5, 0x69, 0xc5, 0xc8, 0x8c, 0xa9, 0x71, 0x3f}},
    {0x23ab9d7a, 0x820e, 0x4c1b, {0xa9, 0x92, 0xba, 0x48, 0x7e, 0xc1, 0x81, 0xe3}},
    {0x231fdd4b, 0x9546, 0x4d93, {0x9b, 0x64, 0xe9, 0x5b, 0x05, 0x93, 0x6a, 0xa0}},
    {0x98ed6eec, 0x9bb8, 0x4974, {0xba, 0xcd, 0x78, 0x08, 0x61, 0x5f, 0x69, 0x38}},
    {0x8a9e6798, 0x9d80, 0x43f3, {0xac, 0xaa, 0xd7, 0xd4, 0xd3, 0xbb, 0xf6, 0xf8}},
    {0x54412395, 0x8883, 0x4fe4, {0xa4, 0xdf, 0x5c, 0x17, 0x5f, 0xd9, 0x79, 0x7d}},
    {0x6ce3f74f, 0xd0c2, 0x42ac, {0xbd, 0x07, 0x01, 0x0f, 0x4a, 0xe3, 0x71, 0x32}},
    {0xa3fe4474, 0x0ccd, 0x4da4, {0xa9, 0xdd, 0x24, 0x63, 0xcc, 0x60, 0xaa, 0x93}},
    {0x86f336eb, 0x84ce, 0x425b, {0xb6, 0x60, 0x32, 0x60, 0xa9, 0x24, 0x99, 0x7e}},
    {0x493815ab, 0xca4d, 0x4c85, {0xad, 0xaf, 0xa7, 0xc2, 0x4d, 0x41, 0x6a, 0x40}},
    {0xc8a1b253, 0xbb78, 0x4838, {0xa9, 0xb3, 0x56, 0x53, 0x3f, 0x65, 0x75, 0x03}},
    {0x0021da16, 0x2601, 0x4118, {0xbb, 0x95, 0xbc, 0x56, 0xfc, 0x51, 0x47, 0x27}},
    {0xb0a25fd1, 0xfaf3, 0x4a71, {0xad, 0xcb, 0xea, 0x5a, 0xd8, 0x78, 0xf4, 0xcc}},
    {0x1f8fb6ee, 0x57ad, 0x4d0c, {0x87, 0x4a, 0xea, 0xd7, 0xa9, 0xce, 0xde, 0xc6}},
    {0xa87db6a3, 0xff91, 0x4b7f, {0x9c, 0x33, 0x74, 0xed, 0x20, 0x1e, 0xae, 0xd0}},
  }};
}

namespace pul::audio::bus {
  enum class Type : uint32_t {
    MasterBus,
  };

  constexpr std::array<fmodGuid, 1> guids = {{
    {0x4d6a2ff7, 0xadcc, 0x47f9, {0x94, 0x28, 0x0a, 0x99, 0x3c, 0x62, 0x30, 0xb9}},
  }};
}

namespace pul::audio::bank {
  enum class Type : uint32_t {
    Announcer,
    Hud,
    Master,
    Soundtrack,
  };

  constexpr std::array<fmodGuid, 4> guids = {{
    {0xf45b4972, 0x4f75, 0x4379, {0xa6, 0x21, 0x47, 0x3b, 0xd7, 0xb5, 0xc1, 0x6f}},
    {0xfeac3c5c, 0x1581, 0x43e5, {0x86, 0x61, 0xb3, 0xf6, 0xde, 0x39, 0x69, 0x0c}},
    {0xa5f0bc58, 0x7b9c, 0x4d31, {0x9c, 0xa8, 0xbd, 0x6e, 0x6e, 0xc6, 0x76, 0x0b}},
    {0xbbd9d71e, 0xa4bd, 0x43a6, {0xaf, 0x57, 0x34, 0xc9, 0x82, 0xc1, 0x44, 0x62}},
  }};
}

namespace pul::audio::param {
  enum class Type : uint32_t {
    AnnouncerCountdown,
    CharacterCharacterType,
    CharacterDamage,
    CharacterDamageType,
    MapEntitiesAxeSize,
    MapEntitiesAxeType,
    MapEntitiesLiftStage,
    MapEntitiesLiftType,
    MaterialLiquidType,
    MaterialRockSize,
    MaterialType,
    PhysxForce,
    PickupType,
  };

  constexpr std::array<fmodGuid, 13> guids = {{
    {0xf811b4ac, 0x1e41, 0x4ef9, {0xaa, 0x54, 0xcd, 0xc7, 0x65, 0x11, 0x53, 0x8f}},
    {0x4df01032, 0xdc09, 0x4afe, {0x8f, 0x85, 0xde, 0x29, 0xdf, 0x84, 0xf1, 0x92}},
    {0xad2f8cff, 0x8d8b, 0x4ca3, {0xb2, 0x06, 0x11, 0xcf, 0x8d, 0x8f, 0x46, 0x0f}},
    {0x4d055e86, 0x2f85, 0x4140, {0x99, 0x7a, 0x57, 0xec, 0x4f, 0xa3, 0xbd, 0xa1}},
    {0xcc35d944, 0xa8a0, 0x4e86, {0xbd, 0x0d, 0x1e, 0xb2, 0x2c, 0x9b, 0xe0, 0x97}},
    {0x87d038f4, 0x0667, 0x4b1e, {0x86, 0x9a, 0xc8, 0x4f, 0xfa, 0xe6, 0xd6, 0xde}},
    {0x52e81639, 0x3699, 0x40b2, {0x91, 0x0a, 0xcb, 0x24, 0x1b, 0x4b, 0xb6, 0xd1}},
    {0xcdc9b063, 0x06ee, 0x4193, {0x96, 0x53, 0xce, 0x21, 0x51, 0x29, 0x05, 0xa3}},
    {0x1e5dee66, 0x3068, 0x493e, {0x8e, 0x77, 0x05, 0x09, 0xb5, 0xa4, 0x51, 0xcd}},
    {0x658b688f, 0x9dd9, 0x4458, {0xb9, 0x1d, 0x9d, 0xdd, 0x83, 0x3d, 0xa6, 0x44}},
    {0x138ec28d, 0x1176, 0x4404, {0x8b, 0xe9, 0x13, 0xd1, 0x97, 0xde, 0x77, 0x6c}},
    {0x64f8722f, 0x45af, 0x4677, {0xba, 0x7d, 0xe6, 0x56, 0xdf, 0xd1, 0x9a, 0x47}},
    {0x6da638d5, 0x1559, 0x4e84, {0xb8, 0x5d, 0x19, 0xbf, 0x59, 0xc4, 0xa7, 0x94}},
  }};
}
